## Project: Classes ##
## Cody Gammon ##
## 000888849 ##
## cody.gammon@edu.sait.ca ##
# Version 1 ##

from tabulate import tabulate
class Doctor:
    def __init__(self, id, name, spec, work_time, qual, roomNum): ### initializes variables for the doctor class ###
        self.id = id
        self.name = name
        self.spec = spec
        self.work_time = work_time
        self.qual = qual
        self.roomNum = roomNum
    def formatDocInfo(doctor_list): ### takes the doctor list as an argument, joins all terms with an underscore then returns a formatted string ### 
        formated_list = '\n'.join(['_'.join(sublist) for sublist in doctor_list])
        return formated_list
    def enterDocInfo():### asks the user to enter information, returns the information in order to later be appended to the list of docs ### 
        id = input(f"Please enter the doctor's ID: ")
        name = input(f"Please enter the doctor's name: ")
        spec = input(f"Please enter the doctor's specialization: ")
        work_time = input(f"Please enter the doctor's work hours: ")
        qual = input(f"Please enter the doctor's qualifications: ")
        roomNum = input(f"Please enter the doctor's room number: ")
        drInfo = [id, name, spec, work_time, qual, roomNum]
        return drInfo
    def readDocFile(): ### reads the doctor.txt file and returns a list of the info ### 
        doc_list = []
        list = []
        file = open('doctors.txt','r')
        read = file.readlines()
        for line in read:
            list.append(line.strip())
        for x in range (len(list)):
            doc_list.append(list[x].split("_"))
        file.close()
        return doc_list
    def searchDocByID(doctor_list):### takes the list of docs, asks the user for an ID, and searches the list for that specific ID number ### 
        tempID = input(f"Please enter the doctor's ID: ")
        for x in range(len(doctor_list)):
            if doctor_list[x][0] == tempID:
                print (tabulate([doctor_list[x]], tablefmt="fancy_grid"))
                return 
        print (f"Can't find the doctor with the same ID on the system.")
        return 
    def searchDocByName(doctor_list):### takes the list of docs, asks the user for a doctor name, and searches the list for a doctor with that specific name ### 
        tempName = input(f"Please enter the doctor's name: ")
        for x in range(len(doctor_list)):
            if doctor_list[x][1] == tempName:
                print (tabulate([doctor_list[x]], tablefmt="fancy_grid"))
                return x
        print (f"Can't find the doctor with the same name on the system.")
        return 
    def displayDocInfo(doctor_list,x):### takes the location x and the doctor list, then displaysspecific doctor information on that list ### 
        print (tabulate(doctor_list[x], tablefmt="fancy_grid"))
        return doctor_list
    def editDocInfo (doctor_list): ### asks the user for the ID of a doctor that they wish to edit, finds that location in the list, then overwrites the info in the list ### 
        editID = input(f"Please enter the ID of the doctor that you want to edit their information: ")
        for x in range(len(doctor_list)):
            if doctor_list[x][0] == editID:
                id = input(f"Please enter the new doctor's ID: ")
                name = input(f"Please enter the new doctor's name: ")
                spec = input(f"Please enter the new doctor's specialization: ")
                work_time = input(f"Please enter the new doctor's work hours: ")
                qual = input(f"Please enter the new doctor's qualifications: ")
                roomNum = input(f"Please enter the new doctor's room number: ")
                drInfo = [id, name, spec, work_time, qual, roomNum]
                doctor_list[x] = drInfo
                return doctor_list
        else:
            print (f"Can't find the doctor with the same ID on the system")
        return doctor_list
    def displayDocList (doctor_list): ### takes the doctor list as an arguemtn, then displays the doctor list in a table ### 
        print (tabulate(doctor_list, tablefmt="fancy_grid"))
        return
    def writeListOfDocToFile (formated_list): ### takes a properly formatted string of info, and writes it to the doctors.txt file ### 
        with open ('doctors.txt', 'w') as file:
            file.write(formated_list)
        pass
    def displayDocMenu (): ### the doctor menu for the user to pick and choose the intended use ### 
        doc_choice = int(input(f'Doctors Menu:\n1 - Display Doctors List\n2 - Search for doctor by ID\n3 - Search for doctor by name\n4 - Add a doctor\n5 - Edit doctor info\n6 - Back to the main menu\n'))
        if doc_choice == 1:
            doc_list = Doctor.readDocFile()
            Doctor.displayDocList(doc_list)
            Doctor.displayDocMenu()
        elif doc_choice ==2:
            doc_list = Doctor.readDocFile()
            Doctor.searchDocByID(doc_list)
            Doctor.displayDocMenu()
        elif doc_choice ==3:
            doc_list = Doctor.readDocFile()
            Doctor.searchDocByName(doc_list)
            Doctor.writeListOfDocToFile(Doctor.formatDocInfo(doc_list))
            Doctor.displayDocMenu()
        elif doc_choice ==4:
            doc_list = Doctor.readDocFile()
            drInfo = Doctor.enterDocInfo()
            doc_list.append(drInfo)
            Doctor.writeListOfDocToFile(Doctor.formatDocInfo(doc_list))
            Doctor.displayDocMenu()
        elif doc_choice ==5:
            doc_list = Doctor.readDocFile()
            doc_list = Doctor.editDocInfo(doc_list)
            Doctor.writeListOfDocToFile(Doctor.formatDocInfo(doc_list))
            Doctor.displayDocMenu()
        elif doc_choice ==6:
            DisplayMenu()

Doctor.displayDocMenu()
