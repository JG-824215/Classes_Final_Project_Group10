from tabulate import tabulate
class Doctor:
    def __init__(self, id, name, spec, work_time, qual, roomNum): ### initializes variables for the doctor class ###
        self.id = id
        self.name = name
        self.spec = spec
        self.work_time = work_time
        self.qual = qual
        self.roomNum = roomNum
    def formatDocInfo(doctor_list): ### takes the doctor list as an argument, joins all terms with an underscore then returns a formatted string ### 
        formated_list = '\n'.join(['_'.join(sublist) for sublist in doctor_list])
        return formated_list
    def enterDocInfo():### asks the user to enter information, returns the information in order to later be appended to the list of docs ### 
        id = input(f"Please enter the doctor's ID: ")
        name = input(f"Please enter the doctor's name: ")
        spec = input(f"Please enter the doctor's specialization: ")
        work_time = input(f"Please enter the doctor's work hours: ")
        qual = input(f"Please enter the doctor's qualifications: ")
        roomNum = input(f"Please enter the doctor's room number: ")
        drInfo = [id, name, spec, work_time, qual, roomNum]
        return drInfo
    def readDocFile(): ### reads the doctor.txt file and returns a list of the info ### 
        doc_list = []
        list = []
        file = open('doctors.txt','r')
        read = file.readlines()
        for line in read:
            list.append(line.strip())
        for x in range (len(list)):
            doc_list.append(list[x].split("_"))
        file.close()
        return doc_list
    def searchDocByID(doctor_list):### takes the list of docs, asks the user for an ID, and searches the list for that specific ID number ### 
        tempID = input(f"Please enter the doctor's ID: ")
        for x in range(len(doctor_list)):
            if doctor_list[x][0] == tempID:
                print (tabulate([doctor_list[x]], tablefmt="fancy_grid"))
                return 
        print (f"Can't find the doctor with the same ID on the system.")
        return 
    def searchDocByName(doctor_list):### takes the list of docs, asks the user for a doctor name, and searches the list for a doctor with that specific name ### 
        tempName = input(f"Please enter the doctor's name: ")
        for x in range(len(doctor_list)):
            if doctor_list[x][1] == tempName:
                print (tabulate([doctor_list[x]], tablefmt="fancy_grid"))
                return x
        print (f"Can't find the doctor with the same name on the system.")
        return 
    def displayDocInfo(doctor_list,x):### takes the location x and the doctor list, then displaysspecific doctor information on that list ### 
        print (tabulate(doctor_list[x], tablefmt="fancy_grid"))
        return doctor_list
    def editDocInfo (doctor_list): ### asks the user for the ID of a doctor that they wish to edit, finds that location in the list, then overwrites the info in the list ### 
        editID = input(f"Please enter the ID of the doctor that you want to edit their information: ")
        for x in range(len(doctor_list)):
            if doctor_list[x][0] == editID:
                id = input(f"Please enter the new doctor's ID: ")
                name = input(f"Please enter the new doctor's name: ")
                spec = input(f"Please enter the new doctor's specialization: ")
                work_time = input(f"Please enter the new doctor's work hours: ")
                qual = input(f"Please enter the new doctor's qualifications: ")
                roomNum = input(f"Please enter the new doctor's room number: ")
                drInfo = [id, name, spec, work_time, qual, roomNum]
                doctor_list[x] = drInfo
                return doctor_list
        else:
            print (f"Can't find the doctor with the same ID on the system")
        return doctor_list
    def displayDocList (doctor_list): ### takes the doctor list as an arguemtn, then displays the doctor list in a table ### 
        print (tabulate(doctor_list, tablefmt="fancy_grid"))
        return
    def writeListOfDocToFile (formated_list): ### takes a properly formatted string of info, and writes it to the doctors.txt file ### 
        with open ('doctors.txt', 'w') as file:
            file.write(formated_list)
        pass
    def displayDocMenu (): ### the doctor menu for the user to pick and choose the intended use ### 
        doc_choice = int(input(f'Doctors Menu:\n1 - Display Doctors List\n2 - Search for doctor by ID\n3 - Search for doctor by name\n4 - Add a doctor\n5 - Edit doctor info\n6 - Back to the main menu\n'))
        if doc_choice == 1:
            doc_list = Doctor.readDocFile()
            Doctor.displayDocList(doc_list)
            Doctor.displayDocMenu()
        elif doc_choice ==2:
            doc_list = Doctor.readDocFile()
            Doctor.searchDocByID(doc_list)
            Doctor.displayDocMenu()
        elif doc_choice ==3:
            doc_list = Doctor.readDocFile()
            Doctor.searchDocByName(doc_list)
            Doctor.writeListOfDocToFile(Doctor.formatDocInfo(doc_list))
            Doctor.displayDocMenu()
        elif doc_choice ==4:
            doc_list = Doctor.readDocFile()
            drInfo = Doctor.enterDocInfo()
            doc_list.append(drInfo)
            Doctor.writeListOfDocToFile(Doctor.formatDocInfo(doc_list))
            Doctor.displayDocMenu()
        elif doc_choice ==5:
            doc_list = Doctor.readDocFile()
            doc_list = Doctor.editDocInfo(doc_list)
            Doctor.writeListOfDocToFile(Doctor.formatDocInfo(doc_list))
            Doctor.displayDocMenu()
        elif doc_choice ==6:
            DisplayMenu()
class Patient:
    def __init__(self, pid, name, disease, gender, age):
        self.pid = pid
        self.name = name
        self.disease = disease
        self.gender = gender
        self.age = age

    def __str__(self):
        return f"{self.pid}, {self.name}, {self.disease}, {self.gender}, {self.age}"

    def formatPatientInfo(self):
        p_info = f"{self.pid}_{self.name}_{self.disease}_{self.gender}_{self.age}"
        return p_info

    def readPatientsFile(self):
        with open("patients.txt", "r") as file:

class Facility:
    def __init__(self, facility_name):
        self.facility_name = facility_name

    def addFacility(self):
        with open("facilities.txt", "a") as file:
            file.write("\n")
            file.write(self.facility_name)
        file.close()

def displayFacilities():
    with open("facilities.txt", "r") as file:
        for line in file:
            print(line)
    file.close()
    

def writeListOfFacilitiesToFile(facilities_list: List[Facility]):
    for facility in facilities_list:
        facility.addFacility()
    
def display_f_menu():
    print("Facilities Menu:")
    print("1 - Display Facilities list")
    print("2 - Add Facility")
    print("3 - Back to the Main Menu")
    
    category = int(input())
    if category == 1:
        displayFacilities()
    elif category == 2:
        data = input("Enter Facility name: ")
        facility = Facility(data)
        facility.addFacility()
    elif category == 3:
        return

display_f_menu()

from typing import List


class Laboratory:
    def __init__(self, lab_name, cost):
        self.lab_name = lab_name
        self.cost = cost

    def __str__(self):
        return f"{self.lab_name}, {self.cost}"

    def addLabToFile(self):
        l_info = self.formatLabInfo()
        with open("laboratories.txt", "a") as file:
            file.write("\n")
            file.write(l_info)
            file.close()

    def formatLabInfo(self):
        lab_info = f"{self.lab_name}_{self.cost}"
        return lab_info

    def readLaboratoriesFile(self):
        with open("laboratories.txt", "r") as file:

            for line in file:
                print(line)
            file.close()


    def displayPatientInfo(self):
        print(f"ID: {self.pid}")
        print(f"Name: {self.name}")
        print(f"Disease: {self.disease}")
        print(f"Gender: {self.gender}")
        print(f"Age: {self.age}")

    def addPatientToFile(self):
        p_info = self.formatPatientInfo()
        with open("patients.txt", "a") as file:
            file.write("\n")
            file.write(p_info)
            file.close()

def editPatientInfo(pid):
    name = input("Enter new name: ")
    disease = input("Enter new disease: ")
    gender = input("Enter new gender: ")
    age = input("Enter new age: ")
    with open("patients.txt", "r") as file:
        data = file.readlines()
    for i in range(len(data)):
        if data[i].startswith(pid):
            patient = Patient(pid, name, disease, gender, age)
            data[i] = patient.formatPatientInfo() + "\n"
    with open("patients.txt", "w") as file:
        file.writelines(data)

def enterPatientInfo():
    pid = input("Enter Patient ID: ")
    name = input("Enter Patient name: ")
    disease = input("Enter Patient disease: ")
    gender = input("Enter Patient gender: ")
    age = input("Enter Patient age:")
    return pid, name, disease, gender, age

def displayPatientList(file):
    patients = []
    with open(file, "r") as f:
        for line in f:
            pid, name, disease, gender, age = line.strip().split("_")
            patients.append(Patient(pid, name, disease, gender, age))
        f.close()
    for p in patients:
        print(p)

def searchPatientById(pid):
    with open("patients.txt", "r") as file:
        for line in file:
            if line.startswith(pid):
                values = line.strip().split("_")
                pid = values[0].strip()
                name = values[1].strip()
                disease = values[2].strip()
                gender = values[3].strip()
                age = values[4].strip()
                file.close()
                return Patient(pid, name, disease, gender, age)
        file.close()

def writeListOfPatientsToFile(patients_list: List[Patient]):
    for patient in patients_list:
        patient.addPatientToFile()

def DisplayPatientsMenu():
    print("1 - Display patients list")
    print("2 - Search for patient by ID")
    print("3 - Add patient")
    print("4 - Edit patient info")
    print("5 - Back to the Main Menu")

def writeListOfLabsToFile(labs_list: List[Laboratory]):
    for lab in labs_list:
        lab.addLabToFile()


def enterLaboratoryInfo():
    lab_name = input("Enter Laboratory facility: ")
    cost = input("Enter Laboratory cost: ")
    return lab_name, cost

def displayLabsList(file):
    labs = []
    with open(file, "r") as f:
        for line in f:
            lab_name, cost = line.strip().split("_")
            labs.append(Laboratory(lab_name.strip(), cost.strip()))
        f.close()
    for l in labs:
        print(l)

def display_l_menu():
    print("Laboratories Menu: ")
    print("1 - Display laboratories list")
    print("2 - Add laboratory")
    print("3 - back to the Main Menu")

    category = int(input())

    if category == 1:

        displayPatientList("patients.txt")
        DisplayPatientsMenu()

    elif category == 2:
        patient_id = input("Enter the patient ID: ")
        patient = searchPatientById(patient_id)
        if patient:
            patient.displayPatientInfo()
        else:
            print("No patient found with that ID.")
        DisplayPatientsMenu()

    elif category == 3:
        pid, name, disease, gender, age = enterPatientInfo()
        patient = Patient(pid, name, disease, gender, age)
        patient.addPatientToFile()
        DisplayPatientsMenu()

    elif category == 4:
        patient_id = input("Please enter the ID of the Patient that you want to edit their information: ")
        patient = searchPatientById(patient_id)
        if patient:
            editPatientInfo(patient_id)
        else:
            print("No patient found with that ID.")
        DisplayPatientsMenu()
    elif category == 5:
        return

DisplayPatientsMenu()
    

        displayLabsList("laboratories.txt")

    elif category == 2:
        lab_name, cost = enterLaboratoryInfo()
        lab = Laboratory(lab_name, cost)
        lab.addLabToFile()
    elif category == 3:
        return

display_l_menu()

